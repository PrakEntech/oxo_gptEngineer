Based on the requirements, here are the core classes, functions, and methods that will be necessary for the text-based tic tac toe game:

1. `Board` class:
   - `__init__(self)`: Initializes the game board.
   - `display(self)`: Displays the current state of the board.
   - `is_full(self) -> bool`: Checks if the board is full.
   - `is_winner(self, player) -> bool`: Checks if a player has won.
   - `is_valid_move(self, move) -> bool`: Checks if a move is valid.
   - `make_move(self, move, player) -> bool`: Makes a move on the board.

2. `Player` class:
   - `__init__(self, name, symbol)`: Initializes a player with a name and symbol.
   - `get_move(self) -> Tuple[int, int]`: Gets the move from the player.

3. `Game` class:
   - `__init__(self, player1, player2)`: Initializes the game with two players.
   - `play(self)`: Starts the game and handles the game flow.

Now, let's proceed with the implementation of the code.

**board.py**
```python
class Board:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def display(self):
        print('---------')
        for row in self.board:
            print('|', end='')
            for cell in row:
                print(f' {cell} |', end='')
            print('\n---------')

    def is_full(self) -> bool:
        for row in self.board:
            if ' ' in row:
                return False
        return True

    def is_winner(self, player) -> bool:
        symbol = player.symbol
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] == symbol:
                return True
            if self.board[0][i] == self.board[1][i] == self.board[2][i] == symbol:
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == symbol:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == symbol:
            return True
        return False

    def is_valid_move(self, move) -> bool:
        row, col = move
        if 0 <= row < 3 and 0 <= col < 3 and self.board[row][col] == ' ':
            return True
        return False

    def make_move(self, move, player) -> bool:
        if self.is_valid_move(move):
            row, col = move
            self.board[row][col] = player.symbol
            return True
        return False
```

**player.py**
```python
class Player:
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol

    def get_move(self):
        while True:
            try:
                row = int(input(f'{self.name}, enter the row (0-2): '))
                col = int(input(f'{self.name}, enter the column (0-2): '))
                return row, col
            except ValueError:
                print('Invalid input. Please enter numbers.')
```

**game.py**
```python
from board import Board
from player import Player


class Game:
    def __init__(self, player1, player2):
        self.board = Board()
        self.players = [player1, player2]
        self.current_player = player1

    def play(self):
        while not self.board.is_full() and not self.board.is_winner(self.current_player):
            self.board.display()
            move = self.current_player.get_move()
            if self.board.make_move(move, self.current_player):
                if self.board.is_winner(self.current_player):
                    self.board.display()
                    print(f'{self.current_player.name} wins!')
                    return
                self.current_player = self.players[1] if self.current_player == self.players[0] else self.players[0]
            else:
                print('Invalid move. Try again.')
        self.board.display()
        print('It\'s a tie!')


if __name__ == '__main__':
    player1 = Player('Player 1', 'X')
    player2 = Player('Player 2', 'O')
    game = Game(player1, player2)
    game.play()
```

**requirements.txt**
```
dataclasses==0.8
```

This is the complete implementation of the text-based tic tac toe game in Python. The code is divided into three files: `board.py`, `player.py`, and `game.py`. The `board.py` file contains the `Board` class, which handles the game board and its operations. The `player.py` file contains the `Player` class, which represents a player and their moves. The `game.py` file contains the `Game` class, which orchestrates the game flow and handles the interaction between the board and players.

To run the game, execute the `game.py` file. The players will take turns entering their moves, and the game will continue until there is a winner or a tie. The current state of the board will be displayed after each move.